package types

import (
	xo "github.com/xo/xo/types"
)

// ToSQL converts the Go types generated by goType to the SQL type of the DB.
func ToSQL(s Schema, target string) xo.Schema {
	newSchema := xo.Schema{
		Driver: target,
		Name:   s.Name,
	}
	converter := sqlTypeConverter{
		Target:        target,
		Enums:         make(map[string]*xo.Enum, len(s.Enums)),
		idUsedCache:   make(map[string]int),
		idMappedCache: make(map[string]string),
	}
	// Convert enums first to use when resolving types in tables.
	for _, enum := range s.Enums {
		converted := converter.convertEnum(target, enum)
		newSchema.Enums = append(newSchema.Enums, converted)
	}
	// Convert tables.
	newSchema.Tables = make([]xo.Table, 0, len(s.Tables))
	for _, table := range s.Tables {
		tbls := converter.convertTable(table)
		newSchema.Tables = append(newSchema.Tables, tbls...)
	}
	return newSchema
}

// Schema is the intermediate schema.
type Schema struct {
	Name   string  `json:"name,omitempty"`
	Enums  []Enum  `json:"enums,omitempty"`
	Tables []Table `json:"tables,omitempty"`
}

// Enum is a enum type.
type Enum struct {
	Name   string   `json:"name,omitempty"`
	Values []string `json:"values,omitempty"`
}

type Table struct {
	Name        string       `json:"name,omitempty"`
	Columns     []Field      `json:"columns,omitempty"`
	PrimaryKeys []Field      `json:"primary_keys,omitempty"`
	Indexes     []Index      `json:"indexes,omitempty"`
	ForeignKeys []ForeignKey `json:"foreign_keys,omitempty"`
}

// Index is a index.
type Index struct {
	Name      string  `json:"name,omitempty"`
	Fields    []Field `json:"fields,omitempty"`
	IsUnique  bool    `json:"is_unique,omitempty"`
	IsPrimary bool    `json:"is_primary,omitempty"`
}

// ForeignKey is a foreign key.
type ForeignKey struct {
	Name      string  `json:"name,omitempty"`
	Fields    []Field `json:"column,omitempty"`     // column that has the key on it
	RefTable  string  `json:"ref_table,omitempty"`  // table the foreign key refers to
	RefFields []Field `json:"ref_column,omitempty"` // column in ref table the index refers to
}

// Field is a column, index, enum value, or stored procedure parameter.
type Field struct {
	Name       string `json:"name,omitempty"`
	Type       Type   `json:"type,omitempty"`
	Default    string `json:"default,omitempty"`
	IsPrimary  bool   `json:"is_primary,omitempty"`
	IsSequence bool   `json:"is_sequence,omitempty"`
}

// Type holds information for a database type.
type Type struct {
	Type     string `json:"type,omitempty"`
	IsArray  bool   `json:"array,omitempty"`
	EnumName string `json:"enum_name,omitempty"`
}

// NewTable creates a new table with the specified name. If manual is false, a
// primary key named "id" is automatically created.
func NewTable(name string, manual bool) Table {
	table := Table{Name: name}
	if !manual {
		id := Field{
			Name: "id",
			Type: Type{
				Type: "int32",
			},
			IsPrimary:  true,
			IsSequence: true,
		}
		table.Columns = []Field{id}
		table.PrimaryKeys = []Field{id}
		table.Indexes = []Index{
			{
				Name:      name + "_pkey",
				Fields:    []Field{id},
				IsUnique:  true,
				IsPrimary: true,
			},
		}
	}
	return table
}

// NewRefTable creates a reference table with the specified name, mapping from
// leftTable to rightTable. Indexes and foreign keys are automatically created.
//
// leftCol is used as the name of the left column and rightCol is used as the
// name of the right column.
// It is assumed that both columns refer to the id column of leftTable and
// rightTable.
func NewRefTable(refTableName, leftTable, leftCol, rightTable, rightCol string) Table {
	leftField := Field{
		Name:      leftCol,
		Type:      Type{Type: "int32"},
		IsPrimary: true,
	}
	rightField := Field{
		Name:      rightCol,
		Type:      Type{Type: "int32"},
		IsPrimary: true,
	}
	table := Table{
		Name:        refTableName,
		Columns:     []Field{leftField, rightField},
		PrimaryKeys: []Field{leftField, rightField},
		Indexes: []Index{
			{
				Name:      refTableName + "_pkey",
				Fields:    []Field{leftField, rightField},
				IsUnique:  true,
				IsPrimary: true,
			},
			{
				Name:   refTableName + "_lookup_idx",
				Fields: []Field{leftField},
			},
		},
		ForeignKeys: []ForeignKey{
			{
				Name:     refTableName + "_left_fkey",
				Fields:   []Field{leftField},
				RefTable: leftTable,
				RefFields: []Field{
					{
						Name:       "id",
						Type:       Type{Type: "int32"},
						IsPrimary:  true,
						IsSequence: true,
					},
				},
			},
			{
				Name:     refTableName + "_right_fkey",
				Fields:   []Field{rightField},
				RefTable: rightTable,
				RefFields: []Field{
					{
						Name:       "id",
						Type:       Type{Type: "int32"},
						IsPrimary:  true,
						IsSequence: true,
					},
				},
			},
		},
	}
	return table
}
